import React from 'react'
import { useState, useEffect } from 'react'
import Filter from './components/Filter'
import PersonForm from './components/PersonForm'
import Persons from './components/Persons'
import personService from './services/persons'
import Notification from './components/Notification'

const App = () => {
  const [persons, setPersons] = useState([]) 
  const [newName, setNewName] = useState('')
  const [newNumber, setNewNumber] = useState('')
  const [filterName, setFilter] = useState('')
  const [message, setMessage] = useState(null)
  const [messageType, setMessageType] = useState("green")

  const hook = () => {
    personService
      .getAll()
      .then(initialPersons => {
        setPersons(initialPersons)
      })
  }

  useEffect(hook, [])

  const addPersonWithoutDuplicates = (event) => {
    event.preventDefault()
    const personObject = {
      name: newName,
      number : newNumber,
      // id: persons.length + 1, // id is generated by json-server
    }

    const foundPerson = persons.find(p => p.name === newName)
    if (foundPerson) {
      console.log('%cApp.js line:34 foundPerson', 'color: #007acc;', foundPerson);
      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {
        // update existing person
        const changedPerson = { ...foundPerson, number: newNumber }
        personService 
          .update(foundPerson.id, changedPerson)
          .then(returnedPerson => { // update success
            setPersons(persons.map(p => p.id !== foundPerson.id ? p : returnedPerson))
            setNewName('')
            setNewNumber('')
            setMessage(
              `Updated ${returnedPerson.name}`
            )
            setMessageType("green")
            setTimeout(() => {
              setMessage(null)
            }
            , 5000)
          })
          .catch(error => {
            console.log('%cApp.js line:52 error', 'color: #007acc;', error.response.data.error);
            console.log('%cApp.js line:53 error', 'color: #007acc;', error);
            if (error.response.data.error.startsWith("Validation")) {
              setMessage(
                `${error.response.data.error}`
              )
              setMessageType("red")
              setTimeout(() => {
                setMessage(null)
              }
              , 5000)
            }
            else{
              setMessage(
                `the person '${foundPerson.name}' does not exist on server`
              )
              setMessageType("red")
              setPersons(persons.filter(p => p.id !== foundPerson.id))
              setTimeout(() => {
                setMessage(null)
              }
              , 5000)
            }
          })
      }
    }
    
    else { // add new person
      personService
        .create(personObject)
        .then(returnedPerson => { // add success
          setPersons(persons.concat(returnedPerson))
          setNewName('')
          setNewNumber('')
          setMessage(
            `Added ${returnedPerson.name}`
          )
          setMessageType("green")
          setTimeout(() => {
            setMessage(null)
          }
          , 5000)
        })
        .catch(error => { // validation error
          setMessage(
            `${error.response.data.error}`
          )
          setMessageType("red")
          setTimeout(() => {
            setMessage(null)
          }
          , 5000)
        })
    }
    console.log('button clicked', event.target)
  }
  
  const handleNameChange = (event) => {
    console.log(event.target.value)
    setNewName(event.target.value)
  }

  const handleNumberChange = (event) => {
    console.log(event.target.value)
    setNewNumber(event.target.value)
  }

  const handleFilterChange = (event) => {
    console.log(event.target.value)
    setFilter(event.target.value)
  }

  const personsToShow = 
  persons.filter(person => person.name.toLowerCase().includes(filterName.toLowerCase()))

  const deleteRecord = (id) => {
    const person = persons.find(p => p.id === id)
    if (window.confirm(`Delete ${person.name}?`)) {
      personService // delete from server
        .deleteRecord(id)
        .then(() => { // delete success
          setPersons(persons.filter(p => p.id !== id))
          setMessage(
            `Deleted ${person.name}`
          )
          setMessageType("green")
          setTimeout(() => {
            setMessage(null)
          }
          , 5000)
        })
        .catch(error => { // already deleted
          console.log('%cApp.js line:105 error', 'color: #007acc;', error.response.data.error);
          setMessage(
            `the person '${person.name}' was already deleted from server`
          )
          setMessageType("red")
          setPersons(persons.filter(p => p.id !== id))
          setTimeout(() => {
            setMessage(null)
          }
          , 5000)
        })
    }
  }

  return (
    <div className="container">
      <h2>Phonebook</h2>
      <Notification message={message} messageType={messageType}/>
      <Filter filterName={filterName} handleFilterChange={handleFilterChange} />
      <h3>Add a new</h3>
      <PersonForm addPersonWithoutDuplicates={addPersonWithoutDuplicates}
        newName={newName} handleNameChange={handleNameChange}
        newNumber={newNumber} handleNumberChange={handleNumberChange}
      />
      <h3>Numbers</h3>
      <Persons personsToShow={personsToShow} deleteRecord={deleteRecord} />
    </div>
  )
}

export default App